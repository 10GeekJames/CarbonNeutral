@using System.Reflection
@inject IStringLocalizer<App> Localize

@* <MudThemeProvider Theme="SelectedMudTheme" />
<MudDialogProvider />
<MudSnackbarProvider /> *@
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="@LoadedAssemblies" OnNavigateAsync="@OnNavigateAsync" PreferExactMatches="@true">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    public string roomName { get; set; } = String.Empty;
    //MudTheme SelectedMudTheme = MudStaticDefaultTheme.Default;
    public bool hasRunUserInit = false;
    public bool hasRunAppInit = false;
    public bool hasSkinInit = false;
    public bool watchingSkinEvents = false;
    private List<Assembly> LoadedAssemblies = new List<Assembly>();
    private ClaimsPrincipal user;
    private bool isAuthenticated = false;
    private bool showSplash = true;
    protected override async Task OnInitializedAsync()
    {
        //PlatformCacheService.SetAppDataToReady();
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authstate.User;
        isAuthenticated = user?.Identity?.IsAuthenticated ?? false == true;
        Console.WriteLine($"user is {isAuthenticated}");
        if (!hasRunAppInit)
        {
            Console.WriteLine("Running App Init");
            await GetAppData();
            hasRunAppInit = true;
            //PlatformCacheService.OnSkinChange += ApplySkin;
            PlatformCacheService.UpdateSkin();
            hasSkinInit = true;
            watchingSkinEvents = true;
            Console.WriteLine("Skin Init 1");
        }
        var timer = new System.Timers.Timer(4000);
        timer.Elapsed += (sender, e) =>
        {
            showSplash = false;
            StateHasChanged();
            timer.Stop();
            timer = null;
        };
        timer.Start();
    }
    private async Task GetAppData()
    {
        Console.WriteLine($"InitAppDataAsync: {isAuthenticated}");
        await PlatformCacheService.InitAppDataAsync(isAuthenticated);
        while (!PlatformCacheService.AppDataIsReady)
        {
            Console.WriteLine("GetAppData Waiting on AppData is Ready");
            await Task.Delay(100);
        }
    }

    private async Task OnNavigateAsync(NavigationContext navContext)
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authstate.User;
        var isAuthdSecondCheck = (user?.Identity?.IsAuthenticated == true);
        if (isAuthenticated != isAuthdSecondCheck)
        {
            isAuthenticated = isAuthdSecondCheck;
            await GetAppData();
        }
        
        Console.WriteLine("OnNavAsync");

        while (!PlatformCacheService.AppDataIsReady)
        {
            Console.WriteLine("OnNavigateAsync Waiting on AppData is Ready");
            await Task.Delay(100);
        }
        if (!watchingSkinEvents)
        {
            watchingSkinEvents = true;
            //PlatformCacheService.OnSkinChange += ApplySkin;
            Console.WriteLine("Skin init 2");
        }
        if (!hasSkinInit)
        {
            hasSkinInit = true;
            PlatformCacheService.UpdateSkin();
            Console.WriteLine("Skin init 3");
            //ApplySkin();
        }

        var uriAsUri = new Uri(NavigationManager.Uri);

        var subwebPrefixCount = uriAsUri.Host.Count(rs => rs == '.');

        if (subwebPrefixCount > 2)
        {
            // // get this uri, its owner, its cohosts,
            // does the current logged in user own this uri?
            // is the current logged in user a cohost on this uri?
            // // lookup this member compared to the uri
            // is the current logged in user registered on this uri?
            // is the current logged in user a paid participant on this uri?
        }

        Console.WriteLine($"Uri Path: {uriAsUri}, {uriAsUri.Segments.Count()}");

        if (uriAsUri.Segments.Count() > 3)
        {
            this.roomName = uriAsUri.Segments[2].Substring(0, uriAsUri.Segments[2].Length - 1);
        }
        else
        {
            this.roomName = "";
        }

        var uriPath = NavigationManager.Uri.ToLower();

        if (!uriPath.Contains("localhost"))
        {

        }




        var preLoadAssemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string>() { "AccountModuleBlazorModuleAdmin.dll", "LiveRoomModuleBlazorModuleAdmin.dll" });
        LoadedAssemblies.AddRange(preLoadAssemblies);

        // AccountModule
        if (uriPath.Contains("account/"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "AccountModuleBlazorModule.dll" });
            LoadedAssemblies.AddRange(assemblies);            
        }
        else if(uriPath.Contains("accounta/")) {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "AccountModuleBlazorModule.dll", "AccountModuleBlazorModuleAdmin.dll" });
            LoadedAssemblies.AddRange(assemblies);            
        }
        // \AccountModule

        // LiveRoomModule
        if (uriPath.Contains("liveroom/") || uriPath.Contains("liverooms/"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "LiveRoomModuleBlazorModule.dll" });
            LoadedAssemblies.AddRange(assemblies);            
        }
        else if(uriPath.Contains("liverooma/") || uriPath.Contains("liveroomsa/")) {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "LiveRoomModuleBlazorModule.dll", "LiveRoomModuleBlazorModuleAdmin.dll" });
            LoadedAssemblies.AddRange(assemblies);            
        }
        // \LiveRoomModule

        
        // WordSearchKingdom
        if (uriPath.Contains("wsk/"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "WskBlazorModule.dll" });
            LoadedAssemblies.AddRange(assemblies);
        }
        else if (uriPath.Contains("wska/"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "WskBlazorModuleAdmin.dll" });
            LoadedAssemblies.AddRange(assemblies);
        }
        // \WordSearchKingdom
    }
}
