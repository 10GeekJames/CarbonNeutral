@inject IStringLocalizer<AllGamesComponent> Localize

<MudGrid Class="pa-4" Justify="Justify.Center">
    @foreach (var game in Games)
    {
        <MudItem Class="align-self-center">
            <MudCard Class="border-solid border-2 d-flex flex-column justify-space-around rounded-lg " Style="height: 350px; width: 250px; background: rgba(0, 0, 0, 0.25);">
                <MudCardHeader Class="justify-center">
                    <MudText Typo="Typo.h6" Class="overflow-y-hidden align-self-center game__card-title" Style="max-height: 30px;">@game.Title</MudText>
                </MudCardHeader>
                <MudCardContent >
                    <MudStack Style="height: 100px;" Spacing="0" Class="overflow-y-auto">
                        @foreach (var word in game.GameGrid.HiddenWords)
                        {
                            <MudChip Color=@isFoundStyling(word.IsFound) Class="m-1" Size="Size.Small">@word.Word</MudChip>
                        }
                    </MudStack>
                    <MudText Typo="Typo.caption">@Localize["Difficulty"]</MudText>
                    <MudStack Row="true">
                        <MudChip Color="Color.Info" Size="Size.Small" Variant="@isSelectedDifficulty(game.GameDifficulty, "Easy")">E</MudChip>
                        <MudChip Color="Color.Success" Size="Size.Small" Variant="@isSelectedDifficulty(game.GameDifficulty, "Medium")">M</MudChip>
                        <MudChip Color="Color.Warning" Size="Size.Small" Variant="@isSelectedDifficulty(game.GameDifficulty, "Hard")">H</MudChip>
                        <MudChip Color="Color.Error" Size="Size.Small" Variant="@isSelectedDifficulty(game.GameDifficulty, "ExtraHard")">Ex</MudChip>
                    </MudStack>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NavigateToGame(game.Id.ToString())" FullWidth="true">@Localize["Play"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>


@code {
    [Parameter]
    public List<GameViewModel> Games { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ClaimsPrincipal user;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authstate.User;
        isAuthenticated = user?.Identity?.IsAuthenticated ?? false == true;
        await base.OnInitializedAsync();                    
    }

    protected async Task NavigateToGame(string gameId)
    {
        Console.WriteLine(isAuthenticated);
        if (isAuthenticated) {
            NavigationManager.NavigateTo($"/wsk/game/{gameId}");
        } else {
            NavigationManager.NavigateTo($"/wsk/gamedemo/{gameId}");
        }
    }

    private MudBlazor.Color isFoundStyling(bool isFound) {
        if (isFound) {
            return Color.Success;
        }
        return Color.Primary;
    }
    private MudBlazor.Variant isSelectedDifficulty(GameDifficulties difficulty, string chipDifficulty) {
        if (difficulty.ToString() == chipDifficulty) {
            return Variant.Outlined;
        }
        return Variant.Filled;
    }
}
