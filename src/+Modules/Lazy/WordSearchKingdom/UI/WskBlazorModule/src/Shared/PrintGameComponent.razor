@inject IStringLocalizer<GameComponent> Localize

    
<div  Class="pt-4 no-print d-flex justify-end gap-3">
    @* <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Dark" OnClick=OnRecreateGame>Recreate Game</MudButton>   *@
    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Dark" OnClick=BackToAllGames >All Games</MudButton>    
    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Dark" OnClick=CycleFont >Cycle Font</MudButton>    
</div>

<div class="main-game-container">
    @if(Game.GameGrid != null) {
        <MudStack Class="pa-4 rounded" AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudText Typo="Typo.h4" Align="Align.Center">@Game?.Title</MudText>  
            <div class="play-area-grid align-items-center ma-auto relative" Style="@(($"grid-template-rows: repeat({Game.GameGrid.Width}, 1fr); grid-template-columns: repeat({Game.GameGrid.Height}, 1fr);"))">
                <div style=@($"position: absolute; top: 50%; left: 50%; z-index: 1; transform: translate(-50%,-50%) scale({isLargeGrid()}); opacity: 0.20")>
                    <PrintWskLogo />
                </div>
                @for (var x = 0; x < Game.GameGrid.Width; x++) {
                    @for (var y = 0; y < Game.GameGrid.Height; y++) {                            
                        var storeX = x;
                        var storeY = y;
                        char rowCell = SelectedGridCells[storeX,storeY];
                    
                        <PrintRowCellComponent 
                            RowCell=rowCell
                            X=storeX
                            Y=storeY
                            CurrentFont=@_currentFont
                        />

                        }
                    }                
            </div>
            <MudContainer Class="mt-8">
                <MudText Typo="Typo.h5" Align="Align.Center">
                    Hidden Words
                </MudText>
                <MudDivider />
                <MudGrid Class="my-6" Justify="Justify.Center">
                    @foreach (var word in Game?.GameGrid.HiddenWords)
                    {
                        if (word.Word != "WSK") {
                            <MudItem xs="2">
                                <MudText Style=@($"font-family: {_currentFont}") Class="p-8" Typo="Typo.body1" Align="Align.Center">@word.Word</MudText>
                            </MudItem>
                        }
                    }
                </MudGrid>
            </MudContainer>
        </MudStack>
    }
</div>

@code {
    [Parameter]
    public GameViewModel? Game { get; set; }
    [Parameter]
    public char[,] SelectedGridCells { get; set; }
    [Parameter]
    public List<System.Drawing.Point> SelectedGridCellPoints { get; set; } = new();
    [Parameter]
    public EventCallback OnRecreateGame { get; set; }

    private (int x, int y)? firstClick { get; set; }

    private string _currentFont = "Courier New";

    private MudBlazor.Color isFoundStyling(bool isFound) {
        if (isFound) {
            return Color.Error;
        }
        return Color.Primary;
    }
    private string isLargeGrid() {
        if (Game.GameGrid.Height > 20 && Game.GameGrid.Width > 20) {
            return "5";
        } else {
            return "3";
        }
        
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();      
                       
    }

    private async Task HandleCellClick((MouseEventArgs, char, int, int) args)
    {
        var (e, letter, x, y) = args;
        @* Console.WriteLine($"Clicked Cell X={x} Y={y} {letter}");         *@
        if (firstClick == null)
        {
            firstClick = new(x, y);            
            @* StateHasChanged(); *@
        }
        else
        {
            var request = new GameCheckWordCoordsRequest(Game.Id, firstClick.Value.x, firstClick.Value.y, x, y);
            Game = await WskDataService.GameCheckWordCoordsAsync(request);
            SelectedGridCells = GameGridUtility.ConvertRowCellStringToArray(Game.GameGrid.RowCellData);
            SelectedGridCellPoints = GameGridUtility.ConvertSelectedWordsToPointList(Game.GameGrid.CompletedWordCellData);            
            firstClick = null;
            @* StateHasChanged(); *@
        }
    }

    private void CycleFont()
    {
        var fonts = new List<string>() { "Arial", "Times New Roman", "Comic Sans MS", "Verdana", "Impact", "Georgia", "Trebuchet MS", "Arial Black", "Lucida Console", "Courier New"  };
        var currentFont = _currentFont;
        @* Console.WriteLine($"currentFont: {currentFont}"); *@
        var currentIndex = fonts.IndexOf(currentFont);
        var nextIndex = currentIndex + 1;
        if (nextIndex >= fonts.Count)
        {
            nextIndex = 0;
        }
        _currentFont = fonts[nextIndex];
        @* Console.WriteLine($"currentFont: {currentFont}"); *@
    }

    private void BackToAllGames()
    {
        NavigationManager.NavigateTo("/wsk/allgames");
    }
}
