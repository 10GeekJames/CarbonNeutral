@inject IStringLocalizer<RowCellComponent> Localize

<MudLink Class="grid-cell" Style=@(SetLinkZIndex()) OnClick=@(e => CellClicked(e, RowCell, X, Y)) Underline="Underline.None" >
    <MudText Typo="Typo.h6" Class=@(GetClassToUse()) Color=@(GetColorToUse())>@RowCell</MudText>
</MudLink>

@code {
    [Parameter]
    public char RowCell {get;set;}
    [Parameter]
    public bool IsSelected {get;set;} = false;
    [Parameter]
    public bool IsCompleted {get;set;} = false;
    [Parameter]
    public int X {get;set;}
    [Parameter]
    public int Y {get;set;}
    [Parameter]
    public EventCallback<(MouseEventArgs, char, int, int)> OnCellClick { get; set; }

    public Color GetColorToUse(){
        var colorToUse = Color.Default;
        if(IsSelected == true) {
            colorToUse = Color.Secondary;
        }
        else if (IsCompleted == true) {
            colorToUse = Color.Warning;
        }
        else {
            colorToUse = Color.Default;
        }
        return colorToUse;
    }
    public string GetClassToUse(){
        var classToUse = "grid-cell__engraved-text-container";
        if(IsSelected == true) {
            classToUse = "grid-cell__engraved-text-container grid-cell__pop-out-text grid-cell__selected-letter";
        }
        else if (IsCompleted == true) {
            classToUse = "grid-cell__pop-out-text grid-cell__found-word";

        }
        else {
            classToUse = "grid-cell__engraved-text-container";
        }
        return classToUse;
    }
    public string SetLinkZIndex(){
        var zIndex = "z-index: 1;";
        if(IsSelected == true) {
            zIndex = "z-index: -2;";
        }
        else if (IsCompleted == true) {
            zIndex = "z-index: -2;";
        }
        else {
            zIndex = "z-index: 1;";
        }
        return zIndex;
    }
    public async Task CellClicked(MouseEventArgs e, char letter, int x, int y)
    {
        await OnCellClick.InvokeAsync((e, letter, x, y));
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }    


}