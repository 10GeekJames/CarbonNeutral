@inject IStringLocalizer<GameComponent> Localize
<div class="border-md-solid border-xs-none border-xs-0 border-2 mud-border-primary pa-4 rounded main-game-container">
    <style>
        .play-area-grid {
            display: grid;
            border-collapse: collapse;
            aspect-ratio: 1 / 1;
            justify-content: center;
            align-items: center;
            height: fit-content;
            width: fit-content;
            gap: 0;
            padding: 0 50px 0 0;
        }
        .grid-cell {
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Monaco', monospace;
            @* border: 1px solid white; *@
            width: 24px;
            height: 24px;
            text-align: center;
            user-select: none;
            font-size: 1.5em;
            @* padding: 4px 6px; *@
            aspect-ratio: 1 / 1;
            @* transform: scale(1.5, 1); *@
        }
        .grid-cell:hover {
            background-color: #e0e0e0;
            color: black;
            cursor: pointer;
        }
        .grid-cell .mud-link {
            aspect-ratio: 1 / 1;
            font-family: 'Monaco', monospace !important;
            font-weight: bolder;
            font-size: 1em;
        }
        .main-game-container {
            width: fit-content;
            margin: 0 auto;
        }

    </style>
    <MudBreakpointProvider OnBreakpointChanged="((e) => SetStackDirection(e))"/>
    <MudStack Row=isRow Class="pa-4 rounded" AlignItems="AlignItems.Center" Justify="Justify.Center">
        <div class="d-flex">
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText Typo="Typo.h2" Align="Align.Center" Style="writing-mode: vertical-rl;">@Game?.Title</MudText>   
            </MudHidden>
            <div class="play-area-grid align-items-center" Style="@(($"grid-template-rows: repeat({Game.GameGrid.Width}, 1fr); grid-template-columns: repeat({Game.GameGrid.Height}, 1fr);"))">
                @for (var x = 0; x < Game.GameGrid.Width; x++) {
                    @for (var y = 0; y < Game.GameGrid.Height; y++) {
                        var rowCell = Game.GameGrid.RowCellsData[x, y];
                        <MudLink Class="grid-cell" OnClick="@((e) => HandleCellClick(e, rowCell, x, y))"Underline="Underline.None" >
                            <RowCellComponent 
                                RowCell=rowCell 
                                IsCompleted=@Game.GameGrid.CompletedWordCells.Any(rs=>rs.x == x && rs.y==y)  
                                IsSelected=@((bool)(firstClick.Value.x == x && firstClick.Value.y == y))
                            />
                    }
                }
            </div>
        </div>
        <MudContainer Class="border-solid border-xs-0 border-2 mud-border-primary pa-4 rounded ma-0" Style="max-width: 25%;">
            <MudText Typo="Typo.h3" Align="Align.Center">
                Hidden Words
            </MudText>
            <MudDivider />
            <MudStack Class="my-6">
                @foreach (var word in Game?.GameGrid.HiddenWords)
                {
                    <MudChip Color=@isFoundStyling(word.IsFound) Size="Size.Large">
                        <MudText Class="p-8" Typo="Typo.h5" Align="Align.Center">@word.Word</MudText>
                    </MudChip>
                }
            </MudStack>
            <MudStack Spacing="4">
                <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=OnRecreateGame FullWidth="true" >Recreate Game</MudButton>  
                <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=BackToAllGames FullWidth="true" >All Games</MudButton>    
            </MudStack>
        </MudContainer>
    </MudStack>

</div>

@code {
    [Parameter]
    public GameViewModel? Game { get; set; }
    [Parameter]
    public EventCallback OnRecreateGame { get; set; }
    bool isRow { get; set; }
    private (int x, int y)? firstClick { get; set; }

    private void SetStackDirection(MudBlazor.Breakpoint breakpoint)
    {
        Console.WriteLine($"breakpoint: {breakpoint}");
        if (breakpoint == MudBlazor.Breakpoint.Sm || breakpoint == MudBlazor.Breakpoint.Xs)
        {
            isRow = false;
        }
        else
        {
            isRow = true;
        }
        Console.WriteLine($"isRow: {isRow}");
    }

    private MudBlazor.Color isFoundStyling(bool isFound) {
        if (isFound) {
            return Color.Error;
        }
        return Color.Primary;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();                     
    }

    private async Task HandleCellClick(MouseEventArgs e, char letter, int x, int y)
    {
        Console.WriteLine($"Clicked Cell X={x} Y={y} {letter}");        
        if (firstClick == null)
        {
            firstClick = new(x, y);            
        }
        else
        {
            var request = new GameCheckWordCoordsRequest(Game.Id, firstClick.Value.x, firstClick.Value.y, x, y);
            Game = await WskDataService.GameCheckWordCoordsAsync(request);
        }
    }

    private void BackToAllGames()
    {
        NavigationManager.NavigateTo("/wsk/allgames");
    }
}
