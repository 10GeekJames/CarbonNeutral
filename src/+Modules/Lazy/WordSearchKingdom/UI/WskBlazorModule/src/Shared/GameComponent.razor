@inject IStringLocalizer<GameComponent> Localize


<div class=@($"border-double border-xs-none border-xs-0 border-4 mud-border-primary rounded main-game-container px-sm-16 px-md-4 {(IsMobile ? "full-width" : "")}")>
    @if(Game.GameGrid != null) {
        <MudStack Row=@(IsMobile ? false : true) Class="pa-4 rounded" AlignItems="AlignItems.Center" Justify="Justify.Center">
            @if (IsMobile)
            {
                <div class="d-flex" >
                    <MudText Class="highlight-shadow overflow-x-auto overflow-y-hidden"  Typo="Typo.h4" Align="Align.Center" Style="white-space: nowrap; max-height: 10vh; max-width: 90vw"><span class=@LongTitleAddScroll(Game.Title)>@Game?.Title</span></MudText>   
                </div>

            } else {
                <div class="d-flex">
                    <MudText Class="highlight-shadow overflow-y-auto" Typo="Typo.h2" Align="Align.Center" Style="writing-mode: vertical-rl; white-space: nowrap; max-height: 60%"><span class=@LongTitleAddScroll(Game.Title)>@Game?.Title</span></MudText>   
                </div>

            }
            <div style=@($"display: grid; grid-template-areas: \". a a \" \"b c c\" \"b c c\" ")>
                @if(!IsMobile)
                {
                    <div style=@($"grid-area: a; display: flex; flex-direction: row;") class="mb-2">
                        @foreach (var x in _widthLabel)
                        {
                            <div class=@($"grid-cell__engraved-text-container {( IsMobile ? "grid-cell-mobile" : "grid-cell" )}") style="border: 1px dotted darkgray;">
                                <MudText Class="highlight-shadow" Typo=@(IsMobile ? Typo.caption : Typo.body1) Align="Align.Center" Style="white-space: no-wrap;">@x</MudText>   
                            </div>
                        }
                    </div>
                    <div style=@($"grid-area: b; display: flex; flex-direction: column;") class="mr-2">
                        @foreach (var y in _heightLabel)
                        {
                            <div class=@($"grid-cell__engraved-text-container {( IsMobile ? "grid-cell-mobile" : "grid-cell" )}") style="border: 1px dotted darkgray;">
                                <MudText Class="highlight-shadow" Typo=@(IsMobile ? Typo.caption : Typo.body1) Align="Align.Center" Style="white-space: no-wrap;">@y</MudText>   
                            </div>
                        }
                    </div>
                }
                <div class="play-area-grid align-items-center ma-auto" Style="@(($"grid-template-rows: repeat({Game.Width}, 1fr); grid-template-columns: repeat({Game.Height}, 1fr);"))">
                    @for (var x = 0; x < Game.Width; x++) {
                        @for (var y = 0; y < Game.Height; y++) {                            
                            var storeX = x;
                            var storeY = y;
                            char rowCell = SelectedGridCells[storeX,storeY];
                        
                            <RowCellComponent 
                                RowCell=rowCell
                                OnCellClick="HandleCellClick"
                                X=storeX
                                Y=storeY
                                IsCompleted=@(SelectedGridCellPoints.Any(rs=>rs.X == storeX && rs.Y == storeY))
                                IsSelected=@((bool)(firstClick.HasValue && firstClick.Value.x == storeX && firstClick.Value.y == storeY))
                                CurrentFont=@_currentFont
                            />

                            }
                        }                
                </div>
            </div>
            <MudContainer Class="border-double border-xs-0 border-4 mud-border-primary pa-4 rounded ma-0 pa-sm-16" >
                <MudText Class="highlight-shadow" Typo=@(IsMobile ? Typo.h5 : Typo.h3) Align="Align.Center">
                    Hidden Words
                </MudText>
                <MudDivider />
                <MudStack Class="my-6 overflow-y-auto" Style="max-height: 30vh;">
                    @foreach (var word in Game?.HiddenWords)
                    {
                        if (word.Word == "WSK")
                        {
                            <MudChip Color=@isFoundStyling(word.IsFound) Style=@($"display: {(word.IsFound ? "inline-flex" : "none")};") Size="Size.Large">
                                <MudText Class="p-8" Typo=@(IsMobile ? Typo.body1 : Typo.h5) Align="Align.Center">@word.Word</MudText>
                            </MudChip>
                        } else {
                            <MudChip Color=@isFoundStyling(word.IsFound) Size="Size.Large">
                                <MudText Class="p-8" Typo=@(IsMobile ? Typo.body1 : Typo.h5) Align="Align.Center">@word.Word</MudText>
                            </MudChip>
                        }
                    }

                </MudStack>
                <MudStack Spacing="4">
                    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=OnRecreateGame FullWidth="true" >Recreate Game</MudButton>  
                    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=CycleFont FullWidth="true" >Cycle Font</MudButton>    
                    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=BackToAllGames FullWidth="true" >All Games</MudButton>    
                </MudStack>
            </MudContainer>
        </MudStack>
    }
</div>

@code {
    [Parameter]
    public GameViewModel? Game { get; set; }
    [Parameter]
    public EventCallback OnRecreateGame { get; set; }
    [Parameter]
    public char[,] SelectedGridCells { get; set; }
    [Parameter]
    public List<System.Drawing.Point> SelectedGridCellPoints { get; set; } = new();
    [CascadingParameter]
    protected bool IsMobile { get; set; }
    private (int x, int y)? firstClick { get; set; }

    private string _currentFont = "Courier New";

    private IEnumerable<int> _widthLabel => Enumerable.Range(1, Game.Width);
    private IEnumerable<string> _heightLabel => GenerateHeightLabels();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();      
                       
    }

    protected string LongTitleAddScroll(string title) {
        if(!IsMobile) {
            if (title.Length > 17) {
                return "hide-scrollbar overflow-y-auto";
            }
            return "";
        } else {
            if (title.Length > 17) {
                return "hide-scrollbar overflow-x-auto";
            }
            return "";
        }
    }
    public IEnumerable<string> GenerateHeightLabels() {
        for (int i = 1; i <= Game.Height; i++) {
            string label = GetLabelFromNumber(i);
            yield return label;
        }    
    }

    public static string GetLabelFromNumber(int number)
    {
        if (number <= 26)
        {
            return ((char)(number + 64)).ToString();
        }
        else
        {
            int firstCharNumber = (number - 1) / 26;
            int secondCharNumber = (number - 1) % 26 + 1;

            char firstChar = (char)(firstCharNumber + 64);
            char secondChar = (char)(secondCharNumber + 64);

            return $"{firstChar}{secondChar}";
        }
    }
    private MudBlazor.Color isFoundStyling(bool isFound) {
        if (isFound) {
            return Color.Error;
        }
        return Color.Primary;
    }
    

    private async Task HandleCellClick((MouseEventArgs, char, int, int) args)
    {
        var (e, letter, x, y) = args;
        @* Console.WriteLine($"Clicked Cell X={x} Y={y} {letter}");         *@
        if (firstClick == null)
        {
            firstClick = new(x, y);            
            @* StateHasChanged(); *@
        }
        else
        {
            var request = new GameCheckWordCoordsRequest(Game.Id, Game.GameGrid.GameGridInstance.Id, firstClick.Value.x, firstClick.Value.y, x, y);
            Game = await WskDataServiceNotAuthed.GameCheckWordCoordsAsync(request);
            SelectedGridCells = GameGridUtility.ConvertRowCellStringToArray(Game.GameGrid.RowCellData);
            SelectedGridCellPoints = GameGridUtility.ConvertSelectedWordsToPointList(Game.GameGrid.GameGridInstance.CompletedWordCellData);            
            firstClick = null;
            @* StateHasChanged(); *@
        }
    }

    private void CycleFont()
    {
        var fonts = new List<string>() { "Arial", "Times New Roman", "Comic Sans MS", "Verdana", "Impact", "Georgia", "Trebuchet MS", "Arial Black", "Lucida Console", "Courier New"  };
        var currentFont = _currentFont;
        @* Console.WriteLine($"currentFont: {currentFont}"); *@
        var currentIndex = fonts.IndexOf(currentFont);
        var nextIndex = currentIndex + 1;
        if (nextIndex >= fonts.Count)
        {
            nextIndex = 0;
        }
        _currentFont = fonts[nextIndex];
        @* Console.WriteLine($"currentFont: {currentFont}"); *@
    }

    private void BackToAllGames()
    {
        NavigationManager.NavigateTo("/wsk/allgames");
    }
}
