@page "/wsk/newgame"
@layout MainLayoutLanding
@using System.Text.RegularExpressions
@using System.Text
@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<NewGame> Localize

<PageTitle>Word Search Kingdom - Create New Game</PageTitle>
@if (errorThrown)
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
<MudContainer>
    <MudPaper Class="pa-4">
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudField Label="Game Info" Variant="Variant.Outlined">
                <MudTextField @bind-Value=_gameTitle T="string" MaxLength=34 Label="Game Title" Required="true" RequiredError="Game Title is required!" />
                <MudStack Row=@(IsMobile ? false : true) AlignItems="AlignItems.Stretch" Justify="Justify.Center" Class="flex-auto">
                    <MudNumericField @bind-Value=_gridSizeHeight Min=0 Max=100 Label="Grid Size Height" Required="true" RequiredError="Grid Size is required!" HelperText="Recommended: Mobile(20), Max(100)" />
                    <MudNumericField @bind-Value=_gridSizeWidth Min=0 Max=100 Label="Grid Size Width" Required="true" RequiredError="Grid Size is required!" HelperText="Recommended: Mobile(20), Max(100)"  />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=@(() => { _gridSizeHeight = 20; _gridSizeWidth = 20; })>Set Mobile</MudButton>
                </MudStack>
                <MudTextField @bind-Value=_wordsToHide TextChanged=@HandleTextChange Immediate="true" T="string" Label="Words To Hide" Lines="6"  Required="true" HelperText=@($"Seperate list by , or new lines (Current Word Count: {_wordsToHideCount})") RequiredError="Words are required!" Counter="0"/>
                <MudSelect @bind-Value=_difficulty T="GameDifficulties" Label="Difficulty" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value=GameDifficulties.Easy >Easy</MudSelectItem>
                    <MudSelectItem Value=GameDifficulties.Medium >Medium</MudSelectItem>
                    <MudSelectItem Value=GameDifficulties.Hard >Hard</MudSelectItem>
                    <MudSelectItem Value=GameDifficulties.ExtraHard >Extreme</MudSelectItem>
                </MudSelect>
                <MudTextField @bind-Value=_categories T="string" Label="Categories" />
                <MudTextField  @bind-Value=_tags T="string" Label="Tags" />
            </MudField>
            @* <div class="d-flex align-center justify-space-between mt-4"> *@
                <MudStack Row=@(IsMobile ? false : true) Class="mt-4">
                    <MudCheckBox T="bool" Required="true" RequiredError="You should double check." Label="Everything is Complete"  />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick=@CreateNewGame>Create Game</MudButton>
                </MudStack>
            @* </div> *@
        </MudForm>   
    </MudPaper>
</MudContainer>


@code {
    [CascadingParameter]
    protected bool IsMobile { get; set; }
    private bool success;
    private string _gameTitle { get; set; } = "";
    private int _gridSizeHeight { get; set; } = 25;
    private int _gridSizeWidth { get; set; } = 25;
    private string _wordsToHide { get; set; } = "";
    private int _wordsToHideCount { get; set; } = 0;
    private GameDifficulties _difficulty { get; set; } = GameDifficulties.Easy;
    private string _categories { get; set; } = "General";
    private string _tags { get; set; } = "General";

    private bool errorThrown = false;
    private string errorMessage = "";


    MudForm? form;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public void HandleTextChange()
    {
        var wordsToHideArray =_wordsToHide.Split(new[] { "\r\n", "\r", "\n", "," }, StringSplitOptions.RemoveEmptyEntries);
        _wordsToHideCount = wordsToHideArray.Count();
    }

    public async Task CreateNewGame()
    {
        form?.Validate();
        if (_wordsToHide is null)
        {
            return;
        }
        _wordsToHide = "WSK," + _wordsToHide;
        List<HiddenWordViewModel> hiddenWords = _wordsToHide.Split(new[] { "\r\n", "\r", "\n", "," }, StringSplitOptions.RemoveEmptyEntries)
            .Select(word => {
                var pattern = @"\p{L}+";
                var rx = new Regex(pattern);
                var wordMatches = rx.Matches(word);
                var cleanWord = new StringBuilder();
                foreach(Match match in wordMatches)
                {
                    cleanWord.Append(match.Value);
                }
                return new HiddenWordViewModel { Word = cleanWord.ToString().ToUpper() };
                })
            .ToList();

        List<GameCategoryViewModel> categories = _categories.Split(new[] { "\r\n", "\r", "\n", "," }, StringSplitOptions.RemoveEmptyEntries)
            .Select(category => new GameCategoryViewModel { Title = category.Trim().Replace(" ", "_").ToUpper() })
            .ToList();

        List<GameTagViewModel> tags = _tags.Split(new[] { "\r\n", "\r", "\n", "," }, StringSplitOptions.RemoveEmptyEntries)
            .Select(tag => new GameTagViewModel { Title = tag.Trim().Replace(" ", "_").ToUpper() })
            .ToList();

        @* hiddenWords = hiddenWords.Append(new HiddenWordViewModel { Word = "WSK" }); *@
        @* Console.WriteLine(hiddenWords.Count()); *@
        hiddenWords.ForEach(word => Console.WriteLine(word.Word));

        var request = new GameCreateNewRequest(_gameTitle, _gridSizeHeight, _gridSizeWidth, hiddenWords, _difficulty, categories, tags);
        try 
        {
            GameViewModel game = await WskDataService.GameCreateNewAsync(request); 
            await WskDataService.GameCreateNewAsync(request);
            NavigationManager.NavigateTo($"/wsk/game/{game.Id}"); 
            errorThrown = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            if (ex.Message.Contains("Failed to place the hidden word on the grid."))
            {
                errorMessage = "You have too many words for the grid size. Please try again.";
            }
            else
            {
                errorMessage = ex.Message;
            }
            errorThrown = true;
            @* errorMessage = ex.Message; *@
        }
    }

}