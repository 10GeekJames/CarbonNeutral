@inject IStringLocalizer<LiveRoomSessionComponent> Localize


<div class="border-double border-xs-none border-xs-0 border-4 mud-border-primary rounded main-liveRoomSession-container">
    @if(LiveRoomSession.LiveRoomSessionGrid != null) {
        <MudStack Class="pa-4 rounded" AlignItems="AlignItems.Center" Justify="Justify.Center">

            <div class="grid-cell__engraved-text-container d-flex">
                <MudText Class="highlight-shadow" Typo="Typo.h2" Align="Align.Center" Style="writing-mode: vertical-rl;">@LiveRoomSession?.Title</MudText>  
                <MudStack Spacing="4">
                    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=OnRecreateLiveRoomSession FullWidth="true" >Recreate LiveRoomSession</MudButton>  
                    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=BackToAllLiveRoomSessions FullWidth="true" >All LiveRoomSessions</MudButton>    
                    <MudButton Style="justify-self: flex-end;" Variant="Variant.Filled" Color="Color.Tertiary" OnClick=CycleFont FullWidth="true" >Cycle Font</MudButton>    
                </MudStack>
            </div>

            <div class="play-area-grid align-items-center ma-auto" Style="@(($"grid-template-rows: repeat({LiveRoomSession.LiveRoomSessionGrid.Width}, 1fr); grid-template-columns: repeat({LiveRoomSession.LiveRoomSessionGrid.Height}, 1fr);"))">
                @for (var x = 0; x < LiveRoomSession.LiveRoomSessionGrid.Width; x++) {
                    @for (var y = 0; y < LiveRoomSession.LiveRoomSessionGrid.Height; y++) {                            
                        var storeX = x;
                        var storeY = y;
                        char rowCell = SelectedGridCells[storeX,storeY];
                    
                        <RowCellComponent 
                            RowCell=rowCell
                            X=storeX
                            Y=storeY
                            CurrentFont=@_currentFont
                        />

                        }
                    }                
            </div>
            <MudContainer Class="border-double border-xs-0 border-4 mud-border-primary pa-4 rounded ma-0" >
                <MudText Class="highlight-shadow" Typo="Typo.h3" Align="Align.Center">
                    Hidden Words
                </MudText>
                <MudDivider />
                <MudStack Class="my-6 overflow-y-auto" Style="max-height: 50vh;">
                    @foreach (var word in LiveRoomSession?.LiveRoomSessionGrid.HiddenWords)
                    {
                        <MudText Class="p-8" Typo="Typo.h5" Align="Align.Center">@word.Word</MudText>
                    }
                </MudStack>
            </MudContainer>
        </MudStack>
    }
</div>

@code {
    [Parameter]
    public LiveRoomSessionViewModel? LiveRoomSession { get; set; }
    [Parameter]
    public char[,] SelectedGridCells { get; set; }
    [Parameter]
    public List<System.Drawing.Point> SelectedGridCellPoints { get; set; } = new();
    [Parameter]
    public EventCallback OnRecreateLiveRoomSession { get; set; }

    private (int x, int y)? firstClick { get; set; }

    private string _currentFont = "Courier New";

    private MudBlazor.Color isFoundStyling(bool isFound) {
        if (isFound) {
            return Color.Error;
        }
        return Color.Primary;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();      
                       
    }

    private async Task HandleCellClick((MouseEventArgs, char, int, int) args)
    {
        var (e, letter, x, y) = args;
        @* Console.WriteLine($"Clicked Cell X={x} Y={y} {letter}");         *@
        if (firstClick == null)
        {
            firstClick = new(x, y);            
            @* StateHasChanged(); *@
        }
        else
        {
            var request = new LiveRoomSessionCheckWordCoordsRequest(LiveRoomSession.Id, firstClick.Value.x, firstClick.Value.y, x, y);
            LiveRoomSession = await LiveRoomDataService.LiveRoomSessionCheckWordCoordsAsync(request);
            SelectedGridCells = LiveRoomSessionGridUtility.ConvertRowCellStringToArray(LiveRoomSession.LiveRoomSessionGrid.RowCellData);
            SelectedGridCellPoints = LiveRoomSessionGridUtility.ConvertSelectedWordsToPointList(LiveRoomSession.LiveRoomSessionGrid.CompletedWordCellData);            
            firstClick = null;
            @* StateHasChanged(); *@
        }
    }

    private void CycleFont()
    {
        var fonts = new List<string>() { "Arial", "Times New Roman", "Comic Sans MS", "Verdana", "Impact", "Georgia", "Trebuchet MS", "Arial Black", "Lucida Console", "Courier New"  };
        var currentFont = _currentFont;
        @* Console.WriteLine($"currentFont: {currentFont}"); *@
        var currentIndex = fonts.IndexOf(currentFont);
        var nextIndex = currentIndex + 1;
        if (nextIndex >= fonts.Count)
        {
            nextIndex = 0;
        }
        _currentFont = fonts[nextIndex];
        @* Console.WriteLine($"currentFont: {currentFont}"); *@
    }

    private void BackToAllLiveRoomSessions()
    {
        NavigationManager.NavigateTo("/liveRoom/allliveRoomSessions");
    }
}
