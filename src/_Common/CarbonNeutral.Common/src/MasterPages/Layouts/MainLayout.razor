@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_selectedMudTheme" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1" Dense="true" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
            OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <span>Toggle @(_isDarkMode ? "Light Mode" : "Dark Mode")</span>
        <MudToggleIconButton @bind-Toggled="@_isDarkMode" Icon="@Icons.Material.Filled.DarkMode" Color="@Color.Info"
            Title="Dark Mode" ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Warning"
            ToggledTitle="Light Mode" />

        <MudMenu Icon="@Icons.Material.Filled.Menu" AnchorOrigin="Origin.BottomLeft" Edge="Edge.End"
            Color="Color.Inherit" FullWidth="false">
            <MudMenuItem>Sign out</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" DisableOverlay="true" Elevation="2"
            Variant="@DrawerVariant.Mini">
            <NavMenu />
        </MudDrawer>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" DisableOverlay="true" Elevation="2"
            Variant="@DrawerVariant.Temporary">
            <NavMenu />
        </MudDrawer>
    </MudHidden>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pl-0 pr-0 pr-md-4 pl-md-4">
            <Breadcrumb />
            @Body
            <ModuleNav />
            <ModuleSettings />
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = false;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    MudTheme _selectedMudTheme; 

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _mudThemeProvider = _mudThemeProvider ?? new MudThemeProvider();
        _selectedMudTheme = MudStaticDefaultTheme.Default;
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();            
            StateHasChanged();
        }
    }
}